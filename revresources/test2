2 i 162


answer stored in rax? 

i e U 


3


49 i 


What we know: 

Format: 
Digit Character Digit

After scanning the input, it checks if %eax is less than two. In other words, checking to see if you input 3 characters: digit, character, digit. 


Then, the program checks to see if the first digit is greater than 7. Considering it is, it explodes the bomb. 


After storing that information, the program then jumps to $rax, 163. 


Then moves 72 into $eax, 114 in decimal

the compares 23c to 14rsp, 

correct address to examine: 0x7fffffffe984, 0xa2: 162 in decimal. that was my input. 
comaring this against: 572 in decimal. 


So I'm going to add that to my answers.txt then try to get to the same point I was at to continue the rev

I MADE IT !!!


Now im fighting with %al, 0xf(%rsp) 

//////////////////////


phase_4

sub allocates 24 bites on the stack
stack canaries, fs segment offset 28 into rax
store rax val into rsp + 8
set eax to zero
copy stack pointer to rcx
rsp+4 into rdx register
load rsp into rsi

SCAN
compare 2 with eax: eax needs to be 2!


The next number needs to be 4 because it is getting subtracted by 2 then compared to 2. 


next number: 
move rsp into esi: 4
move 7 indo edi
then calls func4

Eax is 4 when it should be 5

Just replaced 99 for 4

I noticed that the comparison was asking for 99, and thought that earlier the bomb was asking for the value of 4, but I guess not?? 




Phase 6

so r14 has 5 in it

eax has 6 in it
Then 5 should get moved into it, making eax 5 now
then it gets subtracted by 1. 





okay phase 6 again: 
643576 was going good. 


Trying 643542

At the first jmp: 
r14: 6

i give up, no ghidra is crazy. 
pen and paper it is

























answers: 

And they have no disregard for human life.
1 2 4 8 16 32
2 r 572
99 3
5 115
6 4 3 1 7 2
